# Generated by Django 5.0.6 on 2024-10-18 21:57

import django.db.models.deletion
import django.utils.timezone
import videos.utils
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('mychannel', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'indexes': [models.Index(fields=['name'], name='videos_tag_name_a00f01_idx')],
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_id', models.CharField(blank=True, max_length=15, unique=True)),
                ('title', models.CharField(max_length=70)),
                ('description', models.TextField(max_length=300)),
                ('video', models.FileField(upload_to=videos.utils.video_directory_path)),
                ('age_restricted', models.BooleanField(default=False)),
                ('category', models.CharField(choices=[('Film and animation', 'Film And Animation'), ('Music', 'Music'), ('Gaming', 'Gaming'), ('Entertainment', 'Entertainment'), ('Fashion', 'Fashion'), ('Beauty', 'Beauty')], default='Entertainment', max_length=50)),
                ('visibility', models.CharField(choices=[('Public', 'Public'), ('Private', 'Private')], default='Public', max_length=50)),
                ('recording_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('recording_location', models.CharField(blank=True, max_length=100, null=True)),
                ('recording_language', models.CharField(choices=[('French', 'French'), ('English', 'English'), ('Other', 'Other')], default='English', max_length=50)),
                ('comment_strategy', models.CharField(choices=[('Allow all comments', 'Allow All Comments'), ('Hold all comments for review', 'Hold For Review'), ('Disable all comments', 'Disable All')], default='Allow all comments', max_length=150)),
                ('ratings_are_visible', models.BooleanField(default=True)),
                ('framerate', models.FloatField(default=0)),
                ('duration', models.FloatField(default=0)),
                ('width', models.PositiveIntegerField(default=0)),
                ('height', models.PositiveIntegerField(default=0)),
                ('views', models.PositiveIntegerField(default=0)),
                ('active', models.BooleanField(default=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('channel_playlist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mychannel.channelplaylist')),
                ('tags', models.ManyToManyField(blank=True, to='videos.tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user_channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mychannel.userchannel')),
            ],
            options={
                'ordering': ['-pk', 'created_on'],
                'indexes': [models.Index(condition=models.Q(('active', True)), fields=['active'], name='active_videos'), models.Index(condition=models.Q(('visibility', True)), fields=['visibility'], name='visible_videos'), models.Index(condition=models.Q(('visibility', True), ('active', True)), fields=['active', 'visibility'], name='active_and_visible_videos'), models.Index(condition=models.Q(('duration__lte', 10), ('active', True)), fields=['duration'], name='less_than_ten_minutes')],
            },
        ),
    ]
